version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gamifyiq-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gamifyiq
      POSTGRES_USER: gamifyiq
      POSTGRES_PASSWORD: gamifyiq_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gamifyiq -d gamifyiq"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: gamifyiq-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: gamifyiq
      MINIO_ROOT_PASSWORD: gamifyiq_minio_password
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: gamifyiq-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GamifyIQ API Server
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: gamifyiq-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://gamifyiq:gamifyiq_dev_password@postgres:5432/gamifyiq
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: gamifyiq
      MINIO_SECRET_KEY: gamifyiq_minio_password
      MINIO_BUCKET: gamifyiq-documents
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "4000:4000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./apps/api/src
          target: /app/src
        - action: rebuild
          path: ./apps/api/package.json

  # GamifyIQ Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: gamifyiq-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:4000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    develop:
      watch:
        - action: sync
          path: ./apps/web/src
          target: /app/src
        - action: rebuild
          path: ./apps/web/package.json

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  default:
    name: gamifyiq-network